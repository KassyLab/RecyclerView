/*
 * Copyright (C) 2018  KassyLab
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import java.nio.file.Files
import java.nio.file.Paths
import java.io.FileOutputStream
import java.util.zip.ZipFile

apply plugin: 'com.jfrog.bintray'

version = libraryVersion

/*
 * Comment the following part if you only want to distribute .aar files.
 * (For example, your source code is obfuscated by Proguard and is not shown to outsite developers)
 * Without source code .jar files, you only can publish on bintray respository but not jcenter.
 */

/*--------------------------------*/
if (project.hasProperty("android")) {
    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.srcDirs
    }

    task javadoc(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
        classpath += configurations.javadocDeps

        afterEvaluate {
            // Wait after evaluation to add the android classpath
            // to avoid "buildToolsVersion is not specified" error
            classpath += files(android.getBootClasspath())

            // Process AAR dependencies
            def aarDependencies = classpath.filter { it.name.endsWith('.aar') }
            classpath -= aarDependencies
            aarDependencies.each { aar ->
                // Extract classes.jar from the AAR dependency, and add it to the javadoc classpath
                def outputPath = "$buildDir/tmp/aarJar/${aar.name.replace('.aar', '.jar')}"
                classpath += files(outputPath)

                // Use a task so the actual extraction only happens before the javadoc task is run
                dependsOn task(name: "extract ${aar.name}").doLast {
                    extractEntry(aar, 'classes.jar', outputPath)
                }
            }
        }
    }
} else { // Java libraries
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

private static def extractEntry(archive, entryPath, outputPath) {
    if (!archive.exists()) {
        throw new GradleException("archive $archive not found")
    }

    def zip = new ZipFile(archive)
    zip.entries().each {
        if (it.name == entryPath) {
            def path = Paths.get(outputPath)
            if (!Files.exists(path)) {
                Files.createDirectories(path.getParent())
                Files.copy(zip.getInputStream(it), path)
            }
        }
    }
    zip.close()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

artifacts {
    archives javadocJar
    archives sourcesJar
}
/*--------------------------------*/

// Bintray
Properties properties = new Properties()
properties.load(project.rootProject.file('local.properties').newDataInputStream())

bintray {
    user = System.getenv('BINTRAY_USER')
    key = System.getenv('BINTRAY_KEY')

    configurations = ['archives']
    override = true
    pkg {
        repo = bintrayRepo
        name = bintrayName
        desc = libraryDescription
        userOrg = organization
        websiteUrl = siteUrl
        vcsUrl = gitUrl
        licenses = allLicenses
        publish = true
        publicDownloadNumbers = true
        version {
            name = libraryVersion
            desc = libraryDescription
            released = new Date()
            vcsTag = libraryVersion
        }
    }
}
